<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>NEHE Lesson 18</title>
    <meta charset="UTF-8"/>

    <!-- Set the viewport size to the screen size, so it will be displayed maximized, but unscaled. -->
    <meta name="viewport" content="width=768, height=1024"/>
    <link rel="stylesheet" type="text/css" href="../css/fixed.css" />

    <!-- Include several libraries from THREE.js and the Scene class  -->
    <script src="../three-js/three.js" type="text/javascript"></script>
    <script src="../three-js/Detector.js" type="text/javascript"></script>
    <script src="../three-js/stats.js" type="text/javascript"></script>
    <script src="../three-js/dat.gui.min.js" type="text/javascript"></script>
    <script src="../gfx/OrbitControls-Touch-Ortho.js" type="text/javascript"></script>
    <script src="../gfx/gfx-scene.js" type="text/javascript"></script>

    <!-- Include several libraries from THREE.js and the Scene class  -->
    <script src="../three-js/shaders/CopyShader.js" type="text/javascript"></script>
    <script src="../three-js/postprocess/EffectComposer.js" type="text/javascript"></script>
    <script src="../three-js/postprocess/RenderPass.js" type="text/javascript"></script>
    <script src="../three-js/postprocess/ShaderPass.js" type="text/javascript"></script>
    <script src="../three-js/postprocess/TexturePass.js" type="text/javascript"></script>
    <script src="../three-js/postprocess/ClearPass.js" type="text/javascript"></script>

    <!-- Shaders adapted from Lee Stemkoski here
         https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/Shader-Halo.html -->
    <script id="vertexShader" type="x-shader/x-vertex">
        uniform vec3 vColor;
        varying vec3 vNormal;

        void main() {
            vNormal = normalize( normalMatrix * normal );
            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
        }
    </script>

    <script id="fragmentShader" type="x-shader/x-fragment">
        uniform vec3 vColor;
        varying vec3 vNormal;

        void main() {
	        float intensity = pow( 0.3 - dot( vNormal, vec3( 0.0, 0.0, 1.0 ) ), 0.5 );
            gl_FragColor = vec4( vColor, 0.5 ) * intensity;
        }
    </script>
</head>
<body>
<script>
    // global variables  (ick)
    var composer;
    var knot, halo;

    // allocate the Scene object, request orbitControls and the stats
    var gfxScene = new GFX.Scene( {
        cameraPos : [10, 10, 6],
        controls:true,
        displayStats:true,
        autoClear: false
    });

    gfxScene.clearAllLights();
    gfxScene.addLight( 'directional', { color:0xffffff, intensity:0.5,  position:[20,25,8]});

    // then initialize our demo's stuff
    initializeDemo();

    // Animate the scene
    animateScene();

    /**
     * Initialize the Demo.
     */
    function initializeDemo() {
        var torusGeom = new THREE.TorusKnotGeometry(2.0, 0.5, 100, 16);
        var torusMat = new THREE.MeshPhongMaterial({ color: '#cccccc', specular: '#111111', shininess: 50 });
        knot = new THREE.Mesh(torusGeom, torusMat);
        gfxScene.add(knot);

        var haloColor = new THREE.Vector3(212 / 255.0, 175 / 255.0, 55 / 255.0);
        var haloMat = new THREE.ShaderMaterial({
            uniforms: { vColor: { type: "v3", value: haloColor } },
            vertexShader:   document.getElementById( 'vertexShader'   ).textContent,
            fragmentShader: document.getElementById( 'fragmentShader' ).textContent,
            side: THREE.BackSide,
            blending: THREE.AdditiveBlending,
            transparent: true
        });

        var haloScale = 1.1;
        var haloGeom = new THREE.TorusKnotGeometry(2*haloScale, 0.5*haloScale, 100, 16);
        halo = new THREE.Mesh( haloGeom, haloMat );
        gfxScene.add( halo );

        var clearPass = new THREE.ClearPass();
        var renderPass = new THREE.RenderPass(gfxScene.scene, gfxScene.camera);
        renderPass.clear = false;

        var copyPass = new THREE.ShaderPass(THREE.CopyShader);
        copyPass.renderToScreen = true;

        var texture = new THREE.TextureLoader().load( 'images/deathvalleysky.jpg' );
        var texturePass = new THREE.TexturePass( texture );

        composer = new THREE.EffectComposer(gfxScene.renderer);

        composer.addPass( clearPass );
        composer.addPass( texturePass );
        composer.addPass( renderPass );
        composer.addPass( copyPass );
    }

    /**
     * Animate the scene and call rendering.
     */
    function animateScene() {
        knot.rotation.x += 0.005;
        knot.rotation.y += 0.005;
        knot.rotation.z += 0.005;
        halo.rotation.x += 0.005;
        halo.rotation.y += 0.005;
        halo.rotation.z += 0.005;

        gfxScene.renderer.clear();
        composer.render();

        // Tell the browser to call this function when page is visible
        requestAnimationFrame(animateScene);
    }

</script>
</body>
</html>